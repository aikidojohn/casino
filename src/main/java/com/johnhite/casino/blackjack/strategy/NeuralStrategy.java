package com.johnhite.casino.blackjack.strategy;

import java.util.List;

import com.google.common.collect.Lists;
import com.johnhite.casino.Card;
import com.johnhite.casino.blackjack.Action;
import com.johnhite.casino.blackjack.DeckListener;
import com.johnhite.casino.blackjack.Hand;
import com.johnhite.casino.nn.NeuralNetwork;

public class NeuralStrategy implements BlackjackStrategy, DeckListener  {
	private List<Double> weights;
	private NeuralNetwork brain;
	
	public NeuralStrategy() {
		//weights = Lists.newArrayList(new Double[]{-0.5163725175066102, -0.800726406588373, 1.4614955550562039, 1.3218453124359228, -2.166696151791796, 0.5518980940597285, 0.4037986574459864, 2.459917301250063, -0.5389326211689554, 0.3640763187713232, 0.24325580716322293, -1.40374585549446, -0.36919228160892453, 0.6703840749043762, 1.4984146590894314, 0.9071628513852088, -0.6630546193800719, 0.2530297392612771, 1.429756501719954, -0.8128490103039268, -0.8202312703768506, 2.0128048581212123, -0.4701601198291235, -0.030396340525975573, 2.111687799271375, -0.557452583346487, -0.05948709554893824, 1.1700323150962222, -0.10385481838848172, -0.5836485322701139, 0.7718525975625411, 1.0521491946122183, -0.2948015464743724, -3.194843646311541, 0.09580602567922644, -0.1427236447981965, 0.978049882801536, -0.9336485146765918, 1.4942401134749794, 0.5725968786038788, -0.1363956774115122, -0.5558130688410249, -1.9717340102918233, 2.2531228439993285, -0.5788246237599061, 0.5664243953015524, -1.3487302002835913, 1.0424764339474966, -0.5117728500324598, -0.7979603652915161, -0.7551344161050263, -0.1053816489712878, 0.7323298016306458, 1.2061116549764306, 2.4361938008561568, -0.06878425795263518, -1.1993848810217924, 0.5694454991032071, -0.4977618365336658, 0.35332358708643974, -0.20625464688301562, 1.0276524566527034, 1.3063548876388367, -0.5782221007644792, 0.07975474609279827, 2.3412075725402426});
		weights = Lists.newArrayList(new Double[]{1.4769080199461444, 0.6998297758320521, 0.4586750397222125, -1.3906627871266501, -0.5232949584863991, -0.41778110151600034, 0.6562080150490611, -0.7531548229312279, -1.2749785210877105, 0.7420558233805851, -0.7630895726181792, 0.04213276646611411, -0.13200781373499193, -1.3824330019585302, -0.20668047602705975, -2.4805346469940166, 0.3897103724429224, -0.4949233900834285, 1.513310137855358, 0.3512101096576854, 0.7661408731619982, -0.5102234432399522, 1.6328027916739087, 0.7920436723277905, 1.608643449606279, -0.9599053374998142, 0.10418357176838788, 0.41500416989351313, -0.6553714061351926, 1.1975441998858893, 0.15468415226837087, 0.4691648077293053, -0.9858862262760854, -0.3564029343390198, 1.2305108361108825, 0.8578564701218157, 1.2430295197938745, 0.6277492734817792, -0.8386901023969584, 0.4186664299532405, -0.2976064347502733, -0.7152228864902194, 1.4181649476052547, 0.7638879702958326, -1.678891597590763, 0.008935214593879753, 3.095656550407913, -0.32650151254424176, 1.6344944607440124, -0.33016510334578286, -1.527514275783033, 1.222588845696728, 0.009443885557021121, 0.9627524285247252, 0.7211979348454224, 0.8014719951354626, 0.5447181557308233, -1.6628152529713836, -0.3398968133927368, 0.6332510534243355, 1.3973575361052675, 0.29170356702463796, 0.3131861357241283, 0.14103096899879836, 0.7617579870506008, -0.12611552027399156});
		brain = new NeuralNetwork(5,1,1,10);
		brain.setWeights(weights);
	}
	
	public NeuralStrategy(List<Double> weights) {
		//weights = Lists.newArrayList(new Double[]{-0.5163725175066102, -0.800726406588373, 1.4614955550562039, 1.3218453124359228, -2.166696151791796, 0.5518980940597285, 0.4037986574459864, 2.459917301250063, -0.5389326211689554, 0.3640763187713232, 0.24325580716322293, -1.40374585549446, -0.36919228160892453, 0.6703840749043762, 1.4984146590894314, 0.9071628513852088, -0.6630546193800719, 0.2530297392612771, 1.429756501719954, -0.8128490103039268, -0.8202312703768506, 2.0128048581212123, -0.4701601198291235, -0.030396340525975573, 2.111687799271375, -0.557452583346487, -0.05948709554893824, 1.1700323150962222, -0.10385481838848172, -0.5836485322701139, 0.7718525975625411, 1.0521491946122183, -0.2948015464743724, -3.194843646311541, 0.09580602567922644, -0.1427236447981965, 0.978049882801536, -0.9336485146765918, 1.4942401134749794, 0.5725968786038788, -0.1363956774115122, -0.5558130688410249, -1.9717340102918233, 2.2531228439993285, -0.5788246237599061, 0.5664243953015524, -1.3487302002835913, 1.0424764339474966, -0.5117728500324598, -0.7979603652915161, -0.7551344161050263, -0.1053816489712878, 0.7323298016306458, 1.2061116549764306, 2.4361938008561568, -0.06878425795263518, -1.1993848810217924, 0.5694454991032071, -0.4977618365336658, 0.35332358708643974, -0.20625464688301562, 1.0276524566527034, 1.3063548876388367, -0.5782221007644792, 0.07975474609279827, 2.3412075725402426});
		this.weights = weights;
		brain = new NeuralNetwork(5,1,1,20);
		brain.setWeights(weights);
	}

	@Override
	public void cardDealt(Card c) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void shuffle() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Action play(Card dealer, Hand hand) {
		List<Double> inputs = Lists.newArrayList();
		int dv = dealer.getValue();
		if (dv == 1) {
			dv += 10;
		}
		
		inputs.add((double)dv);
		inputs.add((double)hand.getScore());
		inputs.add((double)hand.getNumberCards());
		inputs.add(hand.isPair() ? 1.0 : 0.0);
		inputs.add(hand.isSoft() ? 1.0 : 0.0);
		
		double result = brain.update(inputs).get(0);
		Action action = fromDouble(result);
		if (action == Action.SPLIT && !hand.isPair()) {
			return Action.STAND;
		}
		if (action == Action.DOUBLE && hand.isDone()) {
			return Action.STAND;
		}
		return action;
	}

	private Action fromDouble(double val) {
		if (val <= 0.2) {
			return Action.HIT;
		}
		if (val <= 0.4) {
			return Action.DOUBLE;
		}
		if (val <= 0.6) {
			return Action.SPLIT;
		}
		if (val <= 0.8) {
			return Action.SURRENDER;
		}
		return Action.STAND;
	}
	
	@Override
	public int getBet(int min, int max) {
		// TODO Auto-generated method stub
		return min;
	}
	
	
}
